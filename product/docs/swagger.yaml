basePath: /api/v1
definitions:
  domain.Product:
    properties:
      category:
        type: string
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
      updatedAt:
        type: string
    type: object
  dto.CreateProduct:
    properties:
      category:
        type: string
      description:
        type: string
      name:
        maxLength: 100
        minLength: 2
        type: string
      price:
        type: number
      stock:
        minimum: 0
        type: integer
    required:
    - category
    - description
    - name
    - price
    - stock
    type: object
  dto.UpdateProduct:
    properties:
      category:
        type: string
      description:
        type: string
      name:
        maxLength: 100
        minLength: 2
        type: string
      price:
        type: number
      stock:
        minimum: 0
        type: integer
    type: object
host: localhost:4001
info:
  contact: {}
  description: API for managing products
  title: Product Microservice API
  version: "1.0"
paths:
  /api/v1/products:
    get:
      description: Returns all products in the catalog
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Product'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Adds a new product to the catalog
      parameters:
      - description: Product to create
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProduct'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Product'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new product
      tags:
      - products
  /api/v1/products/{id}:
    get:
      description: Returns a single product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Product'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Updates a product's information
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Product'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update product
      tags:
      - products
  /api/v1/products/check-availability:
    get:
      description: Check availability for multiple product IDs
      parameters:
      - description: Comma-separated list of product IDs
        example: 1,2,3
        in: query
        name: ids
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get products by multiple IDs
      tags:
      - products
swagger: "2.0"
